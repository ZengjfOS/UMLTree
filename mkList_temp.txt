@startsalt
{
{T
++ public class LessonOneActivity extends Activity
++++ mGLSurfaceView = new GLSurfaceView(this);
++++ mGLSurfaceView.setRenderer(new LessonOneNativeRenderer());
++++++ public void onSurfaceCreated(GL10 gl, EGLConfig config)
++++++++ public static native void nativeSurfaceCreate();
++++++++++ extern "C" JNIEXPORT void JNICALL Java_com_learnopengles_android_lesson1_LessonOneNativeRenderer_nativeSurfaceCreate( JNIEnv *env, jclass type)
++++++++++++ native1Lesson = new Native1Lesson();
++++++++++++++ native1Lesson->create();
++++++++++++++++ mProgram = GLUtils::createProgram(&VERTEX_SHADER, &FRAGMENT_SHADER);
++++++++++++++++++ GLuint vertexShader = loadShader(GL_VERTEX_SHADER, vertexSource);
++++++++++++++++++++ GLuint shader = glCreateShader(shaderType);
++++++++++++++++++++ glShaderSource(shader, 1, source, NULL);
++++++++++++++++++++ glCompileShader(shader);
++++++++++++++++++ GLuint fragmentShader = loadShader(GL_FRAGMENT_SHADER, fragmentSource);
++++++++++++++++++++ GLuint shader = glCreateShader(shaderType);
++++++++++++++++++++ glShaderSource(shader, 1, source, NULL);
++++++++++++++++++++ glCompileShader(shader);
++++++++++++++++++ GLuint program = glCreateProgram();
++++++++++++++++++ glAttachShader(program, vertexShader);
++++++++++++++++++ glAttachShader(program, fragmentShader);
++++++++++++++++++ glLinkProgram(program);
++++++++++++++++ mModelMatrix = new Matrix();
++++++++++++++++ mMVPMatrix = new Matrix();
++++++++++++++++ mViewMatrix = Matrix::newLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
++++++ public void onSurfaceChanged(GL10 gl, int width, int height)
++++++++ public static native void nativeSurfaceChange(int width, int height);
++++++++++ extern "C" JNIEXPORT void JNICALL Java_com_learnopengles_android_lesson1_LessonOneNativeRenderer_nativeSurfaceChange( JNIEnv *env, jclass type, jint width, jint height)
++++++++++++ native1Lesson->change(width, height);
++++++++++++++ glViewport(0, 0, width, height);
++++++++++++++ mProjectionMatrix = Matrix::newFrustum(left, right, bottom, top, near, far);
++++++ public void onDrawFrame(GL10 gl)
++++++++ public static native void nativeDrawFrame();
++++++++++ extern "C" JNIEXPORT void JNICALL Java_com_learnopengles_android_lesson1_LessonOneNativeRenderer_nativeDrawFrame( JNIEnv *env, jclass type)
++++++++++++ native1Lesson->draw();
++++++++++++++ glUseProgram(mProgram); // 激活指定的Program，接下来的绘制会使用指定的Program进行渲染
++++++++++++++ mMVPMatrixHandle = (GLuint) glGetUniformLocation(mProgram, "u_MVPMatrix");
++++++++++++++ mPositionHandle = (GLuint) glGetAttribLocation(mProgram, "a_Position");
++++++++++++++ mColorHandle = (GLuint) glGetAttribLocation(mProgram, "a_Color");
++++++++++++++ drawTriangle(triangle1VerticesData);
++++++++++++++++ glVertexAttribPointer( (GLuint) mPositionHandle, 3, GL_FLOAT, GL_FALSE, 4 * 7, verticesData);
++++++++++++++++ glEnableVertexAttribArray((GLuint) mPositionHandle);
++++++++++++++++ glUniformMatrix4fv(mMVPMatrixHandle, 1, GL_FALSE, mMVPMatrix->mData);
++++++++++++++++ glDrawArrays(GL_TRIANGLES, 0, 3);
}
}
@endsalt
